class Solution:
    def squareFreeSubsets(self, nums: List[int]) -> int:
        mod = 10**9 + 7

        # Helper function to calculate power (a^b % mod)
        def power(a, b):
            res = 1
            while b:
                if b % 2:
                    res *= a
                    res %= mod
                b >>= 1
                a *= a
                a %= mod
            return res

        # Array to track numbers not allowed in subsets
        not_allowed = [0] * 31

        # Mark multiples of squares as not allowed
        for i in range(2, 6):
            cur = i * i
            for j in range(cur, 31, cur):
                not_allowed[j] += 1

        # Arrays to store valid numbers and their frequencies
        z = []
        fre = [0] * 31

        # Process input array and build valid number array
        for x in nums:
            fre[x] += 1
            if not_allowed[x] == 0:
                z.append(x)
                not_allowed[x] += 1

        # Calculate the power for '1' if it's not allowed
        ex = 1
        if not_allowed[1]:
            ex = power(2, fre[1]) - 1

        n = len(z)
        ans = 0
        lim = 1 << n  # Calculate 2^n for bitmask iteration

        # Iterate through all possible subsets using bitmask
        for i in range(1, lim):
            pro = 1
            gc = 1
            f = 0
            g = 0
            val = 1
            e = 1

            # Check each bit in the bitmask
            for j in range(n):
                if i & (1 << j):
                    gc = math.gcd(pro, z[j])
                    g = 1
                    if gc > 1:
                        f = 1
                        break
                    pro *= z[j]
                    if z[j] != 1:
                        val *= fre[z[j]]
                        val %= mod
                    else:
                        e = ex

            # Update the answer based on the properties of the subset
            if f:
                pass
            elif g:
                val *= e
                val %= mod
                ans += val
                ans %= mod

        return int(ans)
        
            
        
